<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Charlton Austin</title>
    <link>https://charltonaustin.com/tags/python/</link>
    <description>Recent content in python on Charlton Austin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 13 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://charltonaustin.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Why You Should Emulate Containers in Python</title>
      <link>https://charltonaustin.com/posts/why-you-should-emulate-containers-in-python/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://charltonaustin.com/posts/why-you-should-emulate-containers-in-python/</guid>
      <description>The problem Say that you have a list of items and each item has a price. You would like to highlight the item or items that have the lowest price. If all of the items are the same price you wouldn&amp;rsquo;t like to highlight any of them. We might have something like the following
import sys class Item: def __init__(self, name, price): self.name = name self.price = price items = [Item(&amp;#34;1&amp;#34;, 1), Item(&amp;#34;2&amp;#34;, 2), .</description>
    </item>
    
    <item>
      <title>Unit Testing With Higher Order Functions</title>
      <link>https://charltonaustin.com/posts/unit-testing-with-higher-order-functions/</link>
      <pubDate>Wed, 13 Apr 2016 09:03:54 -0400</pubDate>
      
      <guid>https://charltonaustin.com/posts/unit-testing-with-higher-order-functions/</guid>
      <description>Recently I was writing an interesting bit of Python software that had a couple of layers. There were some high level objects that dealt with some domain logic and then some lower level objects that did more of the nitty gritty interactions with the operating system. When I first started thinking about writing the lower level interface, I was a little afraid that writing the unit tests was going to be difficult.</description>
    </item>
    
    <item>
      <title>Python Source Code Gems</title>
      <link>https://charltonaustin.com/posts/python-source-code-gems/</link>
      <pubDate>Mon, 04 Apr 2016 09:03:54 -0400</pubDate>
      
      <guid>https://charltonaustin.com/posts/python-source-code-gems/</guid>
      <description>So fairly regularly I read about and dip into the python source code. For some reason there seems to be a great deal of beautiful and interesting code in both the c and the standard libraries and tests for python. The other day I was doing some reading about generators (I was thinking about how to marry the ideas of functional and object oriented programming) and I came across something that I found fascinating as well beautiful so I decided I should share it here on this silly little blog.</description>
    </item>
    
  </channel>
</rss>